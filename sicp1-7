The good-enough? test used in computing square roots will not be very effective for finding the square roots of very small numbers. Also, in real computers, arithmetic operations are almost always performed with limited precision. This makes our test inadequate for very large numbers. Explain these statements, with examples showing how the test fails for small and large numbers. An alternative strategy for implementing good-enough? is to watch how guess changes from one iteration to the next and to stop when the change is a very small fraction of the guess. Design a square-root procedure that uses this kind of end test. Does this work better for small and large numbers?


Well, good-enough? is:

(define (good-enough? guess x)
    (< (abs (- (square guess) x)) 0.001))

Since the tolerance is arbitrarily set at 0.001, and very small numbers' square roots will also be very small, the accuracy of the good-enough? test decreases the smaller the number you're trying to square root.

An easy example is (sqrt 0.000009), where the answer should be 0.003 [you are actually returned 0.03134584760656851]. This means good-enough? will accept any square root whose square is between 0.002 and 0.004, which is kind of a horrible tolerance. 

Also, if the radicand is small and the square of the guess is small, the absolute value will easily be less than 0.001.

As for very large numbers, limited precision is a problem. I guess if the number is really large, then limited precision limits how close the answer can get to the true answer, and instead of converging will then just oscillate around it. The two attractors, individually squared, will not be close to 0.001 away from the radicand. The computation runs forever.

I tried (sqrt 999999999999999999999999999999999999999999999999999999999999999999999999999999), which ran for a few minutes before I broke out of it. DrRacket shows a vector from 

(average guess (/ x guess))

to

(sqrt-iter (improve guess x) x)

which is some evidence that this is the case, since the computation should be looping there.




My new square-root procedure is essentially the same:

(define (sqrt-iter guess x)
  (if (good-enough? guess (improve guess x))
      guess
      (sqrt-iter (improve guess x)
                 x)))

(define (good-enough? guess improved-guess)
  (< (abs (/ (- improved-guess guess) guess)) 0.0000000000000000001))


This appears to work better for large numbers, in that you get an answer rather than an infinite loop. DrRacket likes to give output like 9.999999996742429e+16. I suppose this still has the same problem with limited precision, but will at least terminate and give an answer.

For smaller numbers the answers are much more exact. It also seems to be faster, but I think this is an illusion.

> (sqrt 0.00000000000009)
3e-07

whereas in the old version, the answer is completely off:

> (sqrt 0.00000000000009)
0.03125000000095906

